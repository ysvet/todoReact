import React, {Component} from 'react';

import AppHeader from '../app-header';
import SearchPanel from '../search-panel';
import TodoList from '../todo-list';
import ItemStatusFilter from '../item-status-filter';
import ItemAddForm from '../item-add-form';

import './app.css';

export default class App extends Component {
  maxId = 100; //for id-s generation (used in add item). In real life id's will generated by server, so all id's used in this are for working demonstration purposes

  state = {
     todoData: [
      this.createTodoItem('Drink coffe'),
      this.createTodoItem('Make Awesome App'),
      this.createTodoItem('Have a lunch'),
    ],
    term: '',
    filter: 'all'
  };

  createTodoItem(label) {
    return {
     label,               //the same as label: label
     important: false,
     done: false,
     id: this.maxId++     //we can change maxId because it's not in STATE
   }
 };

   deleteItem = (id) => {
     this.setState(({ todoData }) => {
        const idx = todoData.findIndex((el) => el.id === id);

///getting new array without changing the old one (!!WE DO NOT WANT TO CHANGE STATE)
        const newArray = [...todoData.slice(0, idx),
                          ...todoData.slice(idx +1)
         ];


        return {
            todoData: newArray
        };

     });
   };

   addItem = (text) => {
     const newItem = this.createTodoItem(text);
      /// and add element in array -  getting new array without changing the old one (!!WE DO NOT WANT TO CHANGE STATE, so NO .push):
      this.setState(({todoData}) => {
        const newArr = [
          ...todoData,
          newItem
        ];
        return{
          todoData: newArr
        };
      });
   };

toggleProperty(arr, id, propName) {
  const idx = arr.findIndex((el) => el.id === id);

  //update object
  const oldItem = arr[idx];
  const newItem = { ...oldItem,
    [propName]: !oldItem[propName]};  // copy oldItem object data to newData object and rewrite the new status of propname (done or important in our case). (object spread operator&computed property names)

    //construct new newArray (taking newData before idx, taking newData after idx and inserting newItem between them)
    return [
      ...arr.slice(0, idx),
      newItem,
      ...arr.slice(idx +1)
     ];
};

onToggleDone = (id) => {
  this.setState(({ todoData }) => {
      return {
         todoData: this.toggleProperty(todoData, id, 'done')
       };
  });
};


onToggleImportant = (id) => {
  this.setState(({ todoData }) => {
      return {
         todoData: this.toggleProperty(todoData, id, 'important')
       };
  });

};

 onSearchChange = (term) => {
   this.setState({ term });
 };


 onFilterChange = (filter) => {
   this.setState({ filter });
 };

 search(items, term) {
  if (term.length === 0) {
    return items;           //if search string is empty - show all the items
  };

  return items.filter((item) => {
      return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1; //indexOf(term) >-1 will give us all the elements which includes 'term'
  });

};

 filter = (items, filter) => {
   switch(filter) {
    case 'all' : return items;
    case 'active' : return items.filter((item) => !item.done);
    case 'done' : return items.filter((item) => item.done);
    default: return items;
  }
 };

render () {

  const { todoData, term, filter } = this.state;
  const visibleItems = this.filter(this.search(todoData, term), filter);
  const doneCount = todoData.filter((el) => el.done).length; // el.done -the same as- el.done === true;
  const todoCount = todoData.length - doneCount;

  return (
    <div className="todo-app">
      <AppHeader toDo={todoCount} done={doneCount} />
      <div className="top-panel d-flex">
        <SearchPanel onSearchChange = {this.onSearchChange}/>
        <ItemStatusFilter filter = { filter }
                          onFilterChange = {this.onFilterChange}/>
      </div>

      <TodoList todos = { visibleItems }
       onDeleted = { this.deleteItem }
       onToggleImportant = { this.onToggleImportant }
       onToggleDone = { this.onToggleDone }
       />

       <ItemAddForm onItemAdded = {this.addItem} />
    </div>
  );
 }
};
